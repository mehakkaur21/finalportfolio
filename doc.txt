1 ADDED THE FRONTEND FOR LOGIN PAGE

2 INSTALLED MONGOOSE AND CREATED A USER SCHEMA CONTAINING USERNAME AND PASSWORD OF USER IN ./MODELS/USER.JS

3 CREATED A MONGODB CLUSTER AND CONNECTED IT WITH OUR APPLICATION IN APP.JS
USING MONGOOSE.CONNECT

4 CREATED OUR FIRST USER WITH A ENCRYPTED PASSWORD

5 NOW WE WILL START WITH AUTHENTICATION
   SET UP /login get route that render the login page 

   SET UP /login post route 
       Get the username and password entered using req.body.username
       Then we will create a session in app.js

6 For creating session install express-session package and import it in app.js
Also install package connect-mongodb-session

import express-session in constant session

7   const MongoDBStore = require('connect-mongodb-session')(session);
    Store the mongodb cluster url and session constant as collection
    This will create a new collection session in mongodb which will contain the active sessions
         const store = new MongoDBStore({
           uri: MONGODB_URI,
           collection: 'sessions'
         })
    Our session has been created

8 Now setup post login
    First we checked if the user entered the correct username and pass as it is there in database
    If credentials were correct 
      we set req.session.isLoggedIn = true; 
      this means we add and object isLoggedIn to our session

      then we set req.session.user = user;
      this will send all the user data to an object user in the request
    
    If credentials are wrong we use the flash function imported in app.js using package 'connect-flash'
    Flash function sends error message to the login page

9 Then we will set the authentcation status on all the pages using the function below in app.js

// ADDING AUTHENTICATION STATUS
app.use((req, res, next) => {
  res.locals.isAuthenticated = req.session.isLoggedIn;
  next();
})
req.session.isLoggedIn contains a true value if we have logged in which we set in step 8
if user has not logged in req.session.isLoggedIn will contain a false value

10 Now we are done with AUTHENTICATION
   We will create business contacts list view 
   CREATE FRONTEND OF BUSINESS CONTACT LIST VIEW
   SETUP ITS ROUTER TO GET THE PAGE AND RENDER IT USING FUNCTION getBusinessContacts() IN businesscontacts.js controller

11 Create new model businesscontacts.js
   In this model we will create a new schema businessContactSchema which will contain information about name, email, contact number and description

   Our Aim is to store data from contact form in collection businesscontacts using businessContactSchema in the models using MONGOOSE

12 Now we will create a post method for contact page in businessContacts.js Controller and use it in the router

postContact = (req, res, next) => {
  const name = req.body.name;
  const email = req.body.email;
  const contactNumber = req.body.contactNumber;
  const additionalInfo = req.body.additionalInfo;
  const businessContacts = new BusinessContact({
    name: name,
    email: email,
    contactNumber: contactNumber,
    description: additionalInfo
  })
  businessContacts.save();
  console.log(name, email, contactNumber, additionalInfo);
  res.redirect('/contact');
}

 businessContacts.save(); Is a mongoose function that saves the data in mongodb server in businessContacts collection

 13 Now we will fetch data from collection business contacts and display it on our business contacts view using ejs and function getBusinessContacts() in our controller

 14 After displaying we will make delete button functional which deletes a user and returns a message that user has been deleted


